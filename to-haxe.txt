todo: add to haxe.txt

just a temp place to leave some notes i get from the web with my iPad
or from vim/server

the haxe cookbook is a really nice way to learn some stuff
  - https://code.haxe.org/category/principles/everything-is-an-expression.html
  
ruby0x1 (of luxe) has a few well written posts about haxe!
  - https://notes.underscorediscovery.com/haxe-from-1000ft/
    - https://notes.underscorediscovery.com/haxe-entry-point/
  - https://notes.underscorediscovery.com/haxe-compile-time-macros/

http://snowkit.github.io/linc/
  - this seems like a cool way to just use pop C++ libs, but still retain Haxe...
  
  
  
notes form ruby:

on backends:
Often a target has it's own implementation of all of the backend details, and standard lib implementation specifics. These are an automatic dependency when targeting that platform, as they make all the generated code work, but the process is transparent to you provided you have them installed through haxelib. For example, haxelib install hxjava would install the java backend, hxcs and hxcpp are the C# and C++ backends respectively.

on neko:
Neko is a VM (Virtual Machine) that runs code written in the neko programming language. The neko language is not intended to be programmed manually, but rather is a generated language that allows running the code (often bytecode) across multiple platforms through the virtual machine. You can think along the lines of lua or other VM's that run bytecode interpreted at runtime.

neko is a Haxe target:
Haxe code can be compiled directly to neko bytecode, which can then be loaded into a neko VM. A good example: mod_neko which runs on Apache web server, can run Haxe code on the server side, much like you would install mod_php and run php files, mod_neko runs neko files. Lot's of frameworks and developers use neko on the server, and code their backend in Haxe. The haxelib server and site are all written in Haxe.

Neko bytecode is cross platform 
This makes it a great candidate for using Haxe to write cross platform command line utilities. The reason you see neko when Haxe is running, is because the Haxe toolkit includes neko (and its tools) and uses it for many things. Again, haxelib, the Haxe package manager, allows packages to include a run.n file, a neko file compiled from Haxe, that will run when a user calls haxelib run yourpackage. This is powerful because you only need one file, and it will run on every target that you support in your code, with full access to the standard library and more.
Neko is useful for these types of tools and includes features like nekotools -boot bytecode.n, which will generate a binary for a plaform (like a windows exe or mac binary), should you want to distribute the tool standalone. Neko also compiles really quickly, because Haxe is fast at compiling and the generated bytecode has no compile step.

Finally, because Haxe includes neko in the installer and is dependent on it, it's a reliable tool that many frameworks and developers lean on to do their bidding. If you're going to be using Haxe and writing tools, it's a great option for scripting user facing utilities that will have no dependencies and be cross platform.
  
  

thoughts 'n quirks from my game dev:

if(this-is-null) throw ("this is not bool")

 // TODO: are strings set by value? yes, they are!

is3d = false; // TODO: maybe can't have field names begin with a number?

the Std (standard) package is automatically imported

package ra; // package name it not automatically implied by file-path
// without it, it will use the top-most name-space

if the module/package doesn't match the file-path
  - add "-cp path-to-modules" to hxml file

 // this.super() doesn't work, must use just super()

import ra.hp.* // doesn't work recursively...

//this = null; // TODO: FAIL, lol    

// note: classes have new instead of class name / standard constructor

// TODO: init in constuctor vs in init()
hmm, why ever seperate this?


naming:
classes at least two characters so that refactoring isn't bad, and that ctags 'n autocomplete all work okay
PunkApp extends App


std.Int() // no (Int)floatyNumber


// TODO: haxe.std not showing up in autocompletion...
