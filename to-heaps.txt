todo: copy to my dropbox

can put notes i gather from the web on my iPad more easily here,
just use the web interface from github


heaps structure:

file / package stucture:
  - super terse to reduce typing package names?.. or maybe a linux user thing
h2d
  - **col, collider**
  - filter, 2d shader effects
  - domkit, ?
  - impl, implementation, used internally
  - **(root), most stuff goes here**
h3d
  - ...one day...
hxd
  - shared between both 2d and 3d parts
  - x/clipper
  - x/earcut
  - fmt, ?
  - fs, file-system
  - impl, implementation, used internally, mostly data structures
  - **net, network**
  - poly2tri, polygon2triangle? graphics vertex drawing stuff, **Point** (use this??), Triangle, Edge, etc.
  - **res, resource**
  - **snd, sound**
  - **(root), most stuff goes here**, mostly OS stuff like input, low-level output, Window, etc.; not game-related
(root), ?

class / data stucture:

window, scene, app:
Window[.js/hl/.etc]
  - maybe a high-level abstraction of the OS window (SDL)
  - there's a different Window for every target
  - contains a single static instance of itself: Window.getInstance()
  - generally don't need to touch this, as Scene handles 'n abstracts most of it (??)
  - might be able to edit some vars through the hxml file: for example, Window.title
  - from FP/HXP, this is HXP.Window
  - from Godot/Unity, this is where you check-mark full-screen, borderless, etc. (DisplayMode)
Scene
  - extends Layers, InteractableScene (??)
  - this data structure is the largest and handles a lot of stuff
  - edits the Window for different ScaleMode
  - draws the entire scene tree front-to-back via render() and drawContent()
  - can add/remove cameras
  - has interactiveCamera which is used to handl mouse/touch input through Interactive
  - provides getInteractive, which might be used by Interactive (??)
  - can also use add/removeEventListener to check for all input events
  - handles changing Scene (?? or in App?)
  - from FP/HXP, maybe a combo of HXP.scene, HXP.screen (ScaleMode, mouse/touch input), and FP/HXP.world? (?? not sure...)
App
  - designed to be inherited, providing entry to the main init() and main update()
  - contains a single static instance of itself (can store a reference of it yourself)
  - has the first default instance of Scene (s2d/s3d)
  - has the main game loop (it's internal, no need to touch)
  - initalizes Key
  - from FP/HXP, this is HXP.Engine (and HXP.App deprecated?)
Key
  - a static helper class for key inputs
  - from FP/HXP, this is also Key!

input flow / propogation:
  - input events are setup in Window via addEventListener (or Scene?), accordingly to each target
    - then handled by Scene
    - then further simplified and handled by Key
    - ...then optionally accessed by Interactable?
  - although you can access all of the global input events, you will likely want to use Key for keys and Interactable for mouse/input
  - can use Interactive to handle mouse/touch input events and
  - can use Key to handle keyboard events from anywhere, even without Interactable!
  - Interactive provides a link between scene tree objects and input, figuring out which object should receive the input
    - imagine you have a 3d world on a tablet device, you will likely want the top-most camera-facing objects to capture input
  - Scene has getInteractable (among other things...) which figures out and fetches the top-most Interactable


object, and all of it's inherited classes:
  - think of these as components of an entity: transform, render, input, vector graphics, etc.
    - as in, something that provides a suite of vars 'n functions to help do something in particular: a library?
  - maybe can inherit Object to write your own component (?)
Object
  - base scene tree object
  - can have a parent Object and can have children Objects, like Flash api
  - provides a transform component (x, y, rotation), providing local to global coordinate helper functions too
Drawable
  - extends Object
  - ...provides a draw/render component (?? no clue)
Graphics
  - extends Drawable
  - provides a Flash-like vector drawing api component (lineStyle, moveTo/lineTo, fill/endFill, etc.)
Interactive
  - extends Object
  - provides an input capture handling component
Layers
  - extends Object
  - ...?? provides a special container data structure tailored to the scene tree: the 2d array of the scene tree
  - it provides ways to put/remove things where you want in the scene tree: under this object, above that layer, etc.,


std.Math
Math (heaps.hxd.Math)
Point
col
  - 
  

-- (end of structure)


trace is not logged in the console!
